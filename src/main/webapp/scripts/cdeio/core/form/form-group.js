// Generated by CoffeeScript 1.8.0
(function() {
  define(['jquery', 'underscore', 'cdeio/core/form/form-field'], function($, _, FormField) {
    var FormGroup;
    return FormGroup = (function() {
      function FormGroup(form, options, fieldOptions) {
        var f, field, fieldOpts, hiddenFieldOpts, _i, _j, _k, _len, _len1, _len2, _ref;
        this.form = form;
        this.options = options;
        this.fieldOptions = fieldOptions;
        if (_.isString(this.options)) {
          this.options = {
            name: this.options
          };
        }
        if (!_.isArray(this.fieldOptions)) {
          this.fieldOptions = [this.fieldOptions];
        }
        this.containerId = _.uniqueId('group');
        this.visible = this.options.visible !== false;
        this.hiddenFields = [];
        hiddenFieldOpts = [];
        this.fields = [];
        fieldOpts = [];
        _ref = this.fieldOptions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          if (_.isString(field)) {
            field = {
              name: field,
              type: 'text'
            };
          }
          if (this.options.readOnly === true) {
            field.readOnly = true;
          }
          if (this.options.disabled === true) {
            field.disabled = true;
          }
          (field.type === 'hidden' ? hiddenFieldOpts : fieldOpts).push(field);
        }
        if (fieldOpts.length === 1) {
          f = fieldOpts[0];
          f.hideLabel = true;
          f.isTheOnlyField = true;
        }
        for (_j = 0, _len1 = fieldOpts.length; _j < _len1; _j++) {
          field = fieldOpts[_j];
          this.fields.push(FormField.build(field, this, form));
        }
        for (_k = 0, _len2 = hiddenFieldOpts.length; _k < _len2; _k++) {
          field = hiddenFieldOpts[_k];
          this.hiddenFields.push(FormField.build(field, this, form));
        }
        this.columns = this.options.columns || 1;
        if (_.some(this.fields, function(f) {
          return f.colspan === 2;
        })) {
          this.columns = 2;
        }
        if (12 % this.columns !== 0) {
          throw new Error("Unsupported columns: " + this.columns + ", only can be: 1, 2, 3, 4, 6, 12");
        }
      }

      FormGroup.prototype.setVisible = function(visible) {
        var field, _i, _len, _ref, _results;
        this.visible = !!visible;
        this.form.$(this.containerId)[this.visible ? 'show' : 'hide']();
        _ref = this.fields;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          _results.push(field.setVisible(this.visible));
        }
        return _results;
      };

      FormGroup.prototype.getTemplateString = function() {
        return '<fieldset\n    id="<%= containerId %>"\n    class="c-form-group-cols-<%= columns %>"\n    <% if (!visible) { %>style="display:none;"<% } %>\n>\n    <% if (label) { %>\n        <legend class="c-form-group-label">\n            <h5>\n                <i class="<%= labelIcon %> c-form-group-label-icon"></i>&nbsp;<%= label %>\n            </h5>\n        </legend>\n    <% } %>\n    <div class="c-form-group-content">\n        <%= groupContent %>\n    </div>\n</fieldset>';
      };

      FormGroup.prototype.getRowTemplate = function() {
        return _.template('<div class="row-fluid"><%= items %></div>');
      };

      FormGroup.prototype.getItemTemplate = function() {
        return _.template('<% if (isInlineGrid || isMultiFilePicker) { %>\n    <%= field %>\n<% } else { %>\n    <div class="span<%= span %>"><%= field %></div>\n<% } %>');
      };

      FormGroup.prototype.getTemplate = function(single, index) {
        var colspan, contents, field, generateNewRow, i, isInlineGrid, isMultiFilePicker, opts, row, spanPerColumn, _i, _j, _len, _ref;
        if (single == null) {
          single = false;
        }
        if (_.isEmpty(this.fields)) {
          return '';
        }
        contents = [];
        row = [];
        spanPerColumn = 12 / this.columns;
        generateNewRow = (function(_this) {
          return function(opts) {
            contents.push(_this.getRowTemplate()({
              isInlineGrid: opts.isInlineGrid,
              isMultiFilePicker: opts.isMultiFilePicker,
              containerId: _this.containerId,
              items: row.join('')
            }));
            return row = [];
          };
        })(this);
        _ref = this.fields;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          field = _ref[i];
          colspan = field.colspan || 1;
          if (colspan > this.columns) {
            throw new Error('field.colspan cannot be greater than group.columns');
          }
          isInlineGrid = field.type === 'inline-grid';
          isMultiFilePicker = field.type === 'file-picker' && field.multiple === true;
          opts = {
            isInlineGrid: isInlineGrid,
            isMultiFilePicker: isMultiFilePicker
          };
          if (row.length + colspan > this.columns) {
            generateNewRow(opts);
          }
          row.push(this.getItemTemplate()({
            isInlineGrid: isInlineGrid,
            isMultiFilePicker: isMultiFilePicker,
            hasOnlyOneField: this.hasOnlyOneField,
            span: colspan * spanPerColumn,
            field: field.getTemplate()
          }));
          for (i = _j = 1; 1 <= colspan ? _j < colspan : _j > colspan; i = 1 <= colspan ? ++_j : --_j) {
            row.push('');
          }
          if (row.length === this.columns) {
            generateNewRow(opts);
          }
        }
        if (row.length > 0) {
          generateNewRow(opts);
        }
        opts = {
          label: this.options.label,
          labelIcon: this.options.labelIcon || 'icon-file-text',
          groupContent: contents.join(''),
          containerId: this.containerId,
          columns: this.columns,
          visible: this.visible
        };
        return _.template(this.getTemplateString())(opts);
      };

      FormGroup.prototype.getHiddenFieldsTemplate = function() {
        var field;
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = this.hiddenFields;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            _results.push(field.getTemplate());
          }
          return _results;
        }).call(this)).join('');
      };

      return FormGroup;

    })();
  });

}).call(this);
